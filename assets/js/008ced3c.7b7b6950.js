"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8953],{6508:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"github/github-token-setup","title":"Github Token Setup","description":"How to setup fine grained token for authentication?","source":"@site/dev/github/github-token-setup.md","sourceDirName":"github","slug":"/github/github-token-setup","permalink":"/dev/github/github-token-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/Cyber-Syntax/cyber-syntax.github.io/dev/github/github-token-setup.md","tags":[{"inline":true,"label":"git","permalink":"/dev/tags/git"},{"inline":true,"label":"github","permalink":"/dev/tags/github"}],"version":"current","lastUpdatedBy":"Cyber-Syntax","lastUpdatedAt":1755205200000,"frontMatter":{"title":"Github Token Setup","id":"github-token-setup","last_update":{"date":"08.15.2025","author":"Cyber-Syntax"},"publish":{"date":"08.15.2025"},"tags":["git","github"]},"sidebar":"defaultSidebar","previous":{"title":"Github SSH Setup","permalink":"/dev/github/github-ssh-setup"}}');var s=t(4848),o=t(8453);const r={title:"Github Token Setup",id:"github-token-setup",last_update:{date:"08.15.2025",author:"Cyber-Syntax"},publish:{date:"08.15.2025"},tags:["git","github"]},l=void 0,a={},d=[{value:"How to setup fine grained token for authentication?",id:"how-to-setup-fine-grained-token-for-authentication",level:2},{value:"PERMISSIONS",id:"permissions",level:2},{value:"Base PERMISSIONS",id:"base-permissions",level:3},{value:"How to not get asked all the time for password for token?",id:"how-to-not-get-asked-all-the-time-for-password-for-token",level:2},{value:"Setting up for gnome keyring (Recomended for security)",id:"setting-up-for-gnome-keyring-recomended-for-security",level:3},{value:"Plain text save token (Bad security but works)",id:"plain-text-save-token-bad-security-but-works",level:3},{value:"Base github config example",id:"base-github-config-example",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"how-to-setup-fine-grained-token-for-authentication",children:"How to setup fine grained token for authentication?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Go github settings, developer settings, fine grained token."}),"\n",(0,s.jsx)(n.li,{children:"Generate token with permissions:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"User perrmissions is not needed"}),"\n",(0,s.jsx)(n.li,{children:"Those are the base ones needed:"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"permissions",children:"PERMISSIONS"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Permissions for the fine grained github token"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"base-permissions",children:"Base PERMISSIONS"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Those are the base general permission you probably\nneed to interact with your repo like push, commit, fetch etc."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","WIP what are those permission exactly do?"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Commit statuses: Read and Write"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Contents: Read and Write"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Commits, branches, downloads, releases and merges"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Issues: Read and write"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For able to make github issue etc. via github cli or other apps"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Pages: Read and write"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For github pages"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Pull requests: Read and write"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For able to make github PR etc. via github cli or other apps"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Workflows: Read and write"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[?] for able to make a configuration on workflow files like main.yml?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Metadata: Read-only (Already enabled because mandatory)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-not-get-asked-all-the-time-for-password-for-token",children:"How to not get asked all the time for password for token?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This happens sometimes when the cache broken on the linux\nor via some updates, or token expration or something bug unknown..."}),"\n",(0,s.jsx)(n.p,{children:"NOTE: Remember, use token for password instead of github password\nwhen you need to gave it to github cli setup"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-for-gnome-keyring-recomended-for-security",children:"Setting up for gnome keyring (Recomended for security)"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This would save your token to your default keyring mostly named ",(0,s.jsx)(n.code,{children:"login"}),"\nand you would be prompted from your polkit if you setup a password\nfor that keyring."]}),"\n",(0,s.jsx)(n.p,{children:"I recommend you to setup a password(for linux: make it same password with your account to open auto when you login) for your keyring because\ngithub tokens are basicly password which you need to treat them\nlike your personal passwords."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Setup credential helper to libsecret"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git config --global credential.helper libsecret\n\n# Check is setup worked:\ngit config --get credential.helper\n# Output would be:\n# libsecret\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"When the first initialization for the github like commit, push..."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"username: <your_exact_github_username>\npassword: <token_start_with_github_pat_12345>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plain-text-save-token-bad-security-but-works",children:"Plain text save token (Bad security but works)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-git",children:"git config --global credential.helper store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you already have that and nothing happens than configure via plain text on ",(0,s.jsx)(n.code,{children:".git-credentials"})," this file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-git",children:"https://1123456:github_pat_1234567123456@github.com\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1123456"})," -> represent github email(mine is private, that's why start with number) starting numbers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"github_pat_1234567123456"})," -> represent your token"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"base-github-config-example",children:"Base github config example"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This is my ",(0,s.jsx)(n.code,{children:"~/.gitconfig"})," file"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-git",children:'[user]\n name = Cyber-Syntax\n email = 115875369+Cyber-Syntax@users.noreply.github.com\n[color]\n ui = auto\n[credential]\n helper = libsecret\n[init]\n defultBranch = main\n defaultBranch = main\n[merge "ours"]\n driver = true\n[safe]\n directory = /etc/nixos\n[core]\n excludefile = /home/developer/Documents/.gitignore\n  editor = nvim\n whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol\n[color "branch"]\n current = yellow bold\n local = green bold\n  remote = cyan bold\n[color "diff"]\n meta = yellow bold\n frag = magenta bold\n old = red bold\n new = green bold\n  whitespace = red reverse\n[color "status"]\n added = green bold\n changed = yellow bold\n  untracked = red bold\n[diff]\n tool = vimdiff\n[difftool]\n  prompt = false\n[delta "decorations"]\n minus-style = red bold normal\n plus-style = green bold normal\n minus-emph-style = white bold red\n minus-non-emph-style = red bold normal\n plus-emph-style = white bold green\n plus-non-emph-style = green bold normal\n file-style = yellow bold none\n file-decoration-style = yellow box\n hunk-header-style = magenta bold\n hunk-header-decoration-style = magenta box\n minus-empty-line-marker-style = normal normal\n plus-empty-line-marker-style = normal normal\n line-numbers-right-format = "{np:^4}\u2502 "\n[trim]\n bases = master,main\n  protected = *production\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);